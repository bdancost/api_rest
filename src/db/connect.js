/**
 * Arquivo: config/database.ts
 *
 * Responsabilidade:
 * - Configura e gerencia a conex√£o com o banco de dados PostgreSQL
 * - Implementa mecanismos de pool de conex√µes
 * - Fornece fun√ß√£o de teste de conex√£o
 * - Sincroniza modelos com o banco (opcional)
 */

// Importa o Sequelize
const { Sequelize } = require("sequelize");
// Carrega vari√°veis de ambiente do arquivo .env
require("dotenv").config();

/**
 * Configura√ß√£o da conex√£o com PostgreSQL
 *
 * Par√¢metros:
 * - DB_NAME: Nome do banco de dados (vari√°vel de ambiente)
 * - DB_USER: Usu√°rio do banco (vari√°vel de ambiente)
 * - DB_PASSWORD: Senha do banco (vari√°vel de ambiente)
 *
 * Op√ß√µes:
 * - host: Endere√ßo do servidor PostgreSQL
 * - port: Porta de conex√£o
 * - dialect: Tipo de banco de dados (postgres)
 * - logging: false para desativar logs de queries (recomendado para produ√ß√£o)
 * - pool: Configura√ß√£o do pool de conex√µes
 */
const sequelize = new Sequelize(
  process.env.DB_NAME, // Nome do banco (from .env)
  process.env.DB_USER, // Usu√°rio (from .env)
  process.env.DB_PASSWORD, // Senha (from .env)
  {
    host: process.env.DB_HOST, // Endere√ßo do servidor
    port: process.env.DB_PORT, // Porta (padr√£o PostgreSQL: 5432)
    dialect: "postgres", // Dialeto para PostgreSQL
    logging: false, // Desativa logs de SQL (performance)

    // Configura√ß√£o do pool de conex√µes
    pool: {
      max: 5, // M√°ximo de conex√µes no pool
      min: 0, // M√≠nimo de conex√µes no pool
      acquire: 30000, // Tempo m√°ximo (ms) para adquirir conex√£o
      idle: 10000, // Tempo m√°ximo (ms) que conex√£o pode ficar idle
    },
  }
);

/**
 * Fun√ß√£o de teste de conex√£o com o banco de dados
 *
 * Funcionalidades:
 * 1. Autentica credenciais com o banco
 * 2. Sincroniza modelos (opcional)
 * 3. Retorna a inst√¢ncia do Sequelize
 *
 * @throws {Error} Se a conex√£o falhar
 * @returns {Promise<Sequelize>} Inst√¢ncia configurada do Sequelize
 */
const connectToDatabase = async () => {
  try {
    // 1. Testa a conex√£o
    await sequelize.authenticate();
    console.log("‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso!");

    /**
     * 2. Sincroniza modelos (opera√ß√£o destrutiva em produ√ß√£o!)
     * Observa√ß√£o: Em produ√ß√£o, prefira usar migrations
     */
    await sequelize.sync();
    console.log("üîÅ Modelos sincronizados com o banco de dados");

    return sequelize;
  } catch (error) {
    console.error("üí• Erro ao conectar ao PostgreSQL:", error);
    process.exit(1); // Encerra a aplica√ß√£o com erro
  }
};

// Exporta recursos para uso na aplica√ß√£o
module.exports = {
  connectToDatabase, // Fun√ß√£o de conex√£o test√°vel
  sequelize, // Inst√¢ncia configurada do Sequelize
};
